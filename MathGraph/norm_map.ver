#version 330 core

layout (location = 0) in vec3 VertexPosition;
layout (location = 1) in vec3 VertexNormal;
layout (location = 2) in vec2 VertexTexCoord;
layout (location = 3) in vec4 VertexTangent;

struct LightInfo {
  vec3 Position;  // Light position in eye coords.
  vec3 Intensity; // A,D,S intensity
};
uniform LightInfo Light;
uniform vec3 viewPos;

out vec3 LightDir;
out vec2 TexCoord;
out vec3 ViewDir;
out vec3 pos;

uniform mat4 View;
uniform mat4 Model;
uniform mat3 NormalMatrix;
uniform mat4 Projection;

void main()
{
    // Transform normal and tangent to eye space
    vec3 norm = normalize( NormalMatrix * VertexNormal );
    vec3 tang = normalize( NormalMatrix * vec3(VertexTangent) );
    // Compute the binormal
    vec3 binormal = normalize( cross( norm, tang ) ) * VertexTangent.w;

    // Matrix for transformation to tangent space
    mat3 toObjectLocal = mat3(
        tang.x, binormal.x, norm.x,
        tang.y, binormal.y, norm.y,
        tang.z, binormal.z, norm.z ) ;

    // Transform light direction and view direction to tangent space
    pos = viewPos - VertexPosition;
    LightDir = normalize( toObjectLocal * (Light.Position - VertexPosition) );

    ViewDir = toObjectLocal * normalize(pos);

    TexCoord = VertexTexCoord;

    gl_Position = Projection * View * Model * vec4(VertexPosition,1.0);
}

